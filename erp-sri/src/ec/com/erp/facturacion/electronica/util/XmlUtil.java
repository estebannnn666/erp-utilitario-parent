package ec.com.erp.facturacion.electronica.util;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.security.cert.CertificateException;
import java.security.cert.CertificateFactory;
import java.security.cert.X509Certificate;

import javax.xml.XMLConstants;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator;
import javax.xml.xpath.XPathExpressionException;

import org.bouncycastle.util.encoders.Base64;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

public class XmlUtil {

	public ByteArrayOutputStream convertirObjetoAXml(Class xmlClass, Object object)
			throws SAXException, IOException, JAXBException, SAXParseException {

		JAXBContext jaxbContext = JAXBContext.newInstance(xmlClass);
		Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
		jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		jaxbMarshaller.marshal(object, baos);
		return baos;

	}

	public static Boolean validarQueUnXmlCumpleConXSD(InputStream xmlInpuStream, String xsdPath)
			throws SAXException, IOException, JAXBException, SAXParseException {
		Source xmlSource = new StreamSource(xmlInpuStream);
		SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
		File xsdFile = new File(xsdPath);
		Schema schema = schemaFactory.newSchema(xsdFile);
		Validator validator = schema.newValidator();
		validator.validate(xmlSource);

		return true;
	}

	public X509Certificate obtenerCertificadoX509() throws XPathExpressionException, CertificateException, IOException {

		X509Certificate certificadoX509;
		ByteArrayInputStream bais = new ByteArrayInputStream(Base64.decode(
				"MIIJtjCCB56gAwIBAgIETkXojzANBgkqhkiG9w0BAQsFADCBoTELMAkGA1UEBhMCRUMxIjAgBgNVBAoTGUJBTkNPIENFTlRSQUwgREVMIEVDVUFET1IxNzA1BgNVBAsTLkVOVElEQUQgREUgQ0VSVElGSUNBQ0lPTiBERSBJTkZPUk1BQ0lPTi1FQ0lCQ0UxDjAMBgNVBAcTBVFVSVRPMSUwIwYDVQQDExxBQyBCQU5DTyBDRU5UUkFMIERFTCBFQ1VBRE9SMB4XDTE2MDIwMjE4NTMwM1oXDTE4MDIwMjE5MjMwM1owgbsxCzAJBgNVBAYTAkVDMSIwIAYDVQQKExlCQU5DTyBDRU5UUkFMIERFTCBFQ1VBRE9SMTcwNQYDVQQLEy5FTlRJREFEIERFIENFUlRJRklDQUNJT04gREUgSU5GT1JNQUNJT04tRUNJQkNFMQ4wDAYDVQQHEwVRVUlUTzE/MBEGA1UEBRMKMDAwMDE0NjI0MDAqBgNVBAMTI0FORFJFQSBFU1RFRkFOSUEgU1VRVUlMTE8gTkFWQVJSRVRFMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA+FKWPwwcoNMskkue+LA73VQmxTPwxA3hmdUNPBEn01Gnhx3BQ3aS2wDqgRHYuiHhNmBW4qmPJzvarZSU+/Fiyt1O4n86MZx6fkA3kzjUDx7CQCcRnrD7jdun0Aez1wtn1pduFLditEVrjFTsLXD5OkpKSOaXRiMSGQ1CFWkfYkxEQ1E6Uy+Yz+QamondqPs11tdaSh/CDv2g3lm9vmKaLu35awRTwg5nAJB723F3xmrCnar5DrRUSHztCW8dcJ9WkHG+vHGaJ+b+/yf5wRUPt7YXRRaPnoVF6u1syoNZo0RinaPJVbAbMQqIV6BYmLhCSa1CElhRU3z3Om8Srb69pwIDAQABo4IE2DCCBNQwCwYDVR0PBAQDAgeAMGYGA1UdIARfMF0wWwYLKwYBBAGCqDsCAQEwTDBKBggrBgEFBQcCARY+aHR0cDovL3d3dy5lY2kuYmNlLmVjL3BvbGl0aWNhLWNlcnRpZmljYWRvL3BlcnNvbmEtbmF0dXJhbC5wZGYwgZEGCCsGAQUFBwEBBIGEMIGBMD4GCCsGAQUFBzABhjJodHRwOi8vb2NzcC5lY2kuYmNlLmVjL2VqYmNhL3B1YmxpY3dlYi9zdGF0dXMvb2NzcDA/BggrBgEFBQcwAYYzaHR0cDovL29jc3AxLmVjaS5iY2UuZWMvZWpiY2EvcHVibGljd2ViL3N0YXR1cy9vY3NwMBoGCisGAQQBgqg7AwEEDBMKMTcxOTc2MTc2NzAgBgorBgEEAYKoOwMCBBITEEFORFJFQSBFU1RFRkFOSUEwGAYKKwYBBAGCqDsDAwQKEwhTVVFVSUxMTzAZBgorBgEEAYKoOwMEBAsTCU5BVkFSUkVURTAxBgorBgEEAYKoOwMHBCMTIUxMQU5PIEdSQU5ERSBEVUNISUNFTEEgWSBTSFlSSVMgMjAZBgorBgEEAYKoOwMIBAsTCTAyMjAyMTg2NDAVBgorBgEEAYKoOwMJBAcTBVF1aXRvMBcGCisGAQQBgqg7AwwECRMHRUNVQURPUjAdBgorBgEEAYKoOwMLBA8TDTE3MTk3NjE3NjcwMDEwIAYKKwYBBAGCqDsDMwQSExBTT0ZUV0FSRS1BUkNISVZPMCEGA1UdEQQaMBiBFmFuZHJlaXRhZ2VtaUBnbWFpbC5jb20wggHfBgNVHR8EggHWMIIB0jCCAc6gggHKoIIBxoaB1WxkYXA6Ly9iY2VxbGRhcHN1YnAxLmJjZS5lYy9jbj1DUkwyOTUsY249QUMlMjBCQU5DTyUyMENFTlRSQUwlMjBERUwlMjBFQ1VBRE9SLGw9UVVJVE8sb3U9RU5USURBRCUyMERFJTIwQ0VSVElGSUNBQ0lPTiUyMERFJTIwSU5GT1JNQUNJT04tRUNJQkNFLG89QkFOQ08lMjBDRU5UUkFMJTIwREVMJTIwRUNVQURPUixjPUVDP2NlcnRpZmljYXRlUmV2b2NhdGlvbkxpc3Q/YmFzZYY0aHR0cDovL3d3dy5lY2kuYmNlLmVjL0NSTC9lY2lfYmNlX2VjX2NybGZpbGVjb21iLmNybKSBtTCBsjELMAkGA1UEBhMCRUMxIjAgBgNVBAoTGUJBTkNPIENFTlRSQUwgREVMIEVDVUFET1IxNzA1BgNVBAsTLkVOVElEQUQgREUgQ0VSVElGSUNBQ0lPTiBERSBJTkZPUk1BQ0lPTi1FQ0lCQ0UxDjAMBgNVBAcTBVFVSVRPMSUwIwYDVQQDExxBQyBCQU5DTyBDRU5UUkFMIERFTCBFQ1VBRE9SMQ8wDQYDVQQDEwZDUkwyOTUwKwYDVR0QBCQwIoAPMjAxNjAyMDIxODUzMDNagQ8yMDE4MDIwMjE5MjMwM1owHwYDVR0jBBgwFoAUGPnw++YyHJlmOSrKi7JpfUknv84wHQYDVR0OBBYEFAkyx7kek9e372/zDWJ+iqEmwwyRMAkGA1UdEwQCMAAwGQYJKoZIhvZ9B0EABAwwChsEVjguMQMCBLAwDQYJKoZIhvcNAQELBQADggIBAElf6wLPsr1Jrc1AbgsjZi0PlRnZhmiL6iPd1IjwoCfj5TbJ3D6d+fCp30yx2upB5uVGKbJoNt1GBLmyrpvTt3Njl+Wu7RHi48CHsdvWu/yMtH3kiMEhPiNghRKgSq8iU+JJOzqXYIMid0DsSEAxDF0ZvAl0rdL+o3S2wQE5KtpJIadcE1Vy84EJFFoHsHWcjeEjaND5UZ3S5XuE4oT7w5ccOCF/mInEl5Hh5ItYAsqQMuDdGxPYrhVSqhjpo+dRlJGFv1UxNVqspBXq6FfvRBgQCaRkvzE93DDl+6Lspao++gpxWeEEPtg6gdDo4BNglRceUO+7oRrcYd08WiCW6iQDr1KJQaUURpWMWH4w75hHBvUG44tfCndB2Nfmym2nTwy11cSbs+hYocSc/5Xw8Zd26ru/e4dLib9F8v6jpJmiz5rApYtY9djD0jIHzrYaaANhMiZvv+2OPmQdelwYbe6i7sQpwptaJeuLn0aykd09o/q7cDiy+Y6u9RSPkXZPI6vn41Hc21zV39RKq+f0Z4ozEn7ZigpaOFBrho0+dq48W0E1L8EZnuhDBwOKFwBZS3ljSzj4CfGB0te+8V9oX6lkP8S1B1Lr1mmQRW9XDD7bpg6V6NdbowLYPgp+czR1z0t12H2sPblxqO+vldVSrqzVmdTsJGPpz2jIao3P5IUN"));
		CertificateFactory cf = CertificateFactory.getInstance("X.509");
		certificadoX509 = (X509Certificate) cf.generateCertificate(bais);
		bais.close();
		return certificadoX509;
	}
}
