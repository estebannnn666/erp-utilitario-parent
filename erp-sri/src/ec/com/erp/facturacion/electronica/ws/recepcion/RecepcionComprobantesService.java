package ec.com.erp.facturacion.electronica.ws.recepcion;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.4 2017-10-14T21:10:58.769-05:00
 * Generated source version: 3.1.4
 * 
 */
@WebServiceClient(name = "RecepcionComprobantesService", wsdlLocation = "META-INF/wsdl/RecepcionComprobantes.wsdl", targetNamespace = "http://ec.gob.sri.ws.recepcion")
public class RecepcionComprobantesService extends Service {

	public final static URL WSDL_LOCATION;

	public final static QName SERVICE = new QName("http://ec.gob.sri.ws.recepcion", "RecepcionComprobantesService");
	public final static QName RecepcionComprobantesPort = new QName("http://ec.gob.sri.ws.recepcion",
			"RecepcionComprobantesPort");
	static {
		URL url = null;
		try {
			URL baseUrl = RecepcionComprobantesService.class.getClassLoader().getResource(".");
			url = new URL(baseUrl, "META-INF/wsdl/RecepcionComprobantes.wsdl");
		} catch (MalformedURLException e) {
			java.util.logging.Logger.getLogger(RecepcionComprobantesService.class.getName()).log(
					java.util.logging.Level.INFO, "Can not initialize the default wsdl from {0}",
					"file:RecepcionComprobantes.wsdl");
		}
		WSDL_LOCATION = url;
	}

	public RecepcionComprobantesService(URL wsdlLocation) {
		super(wsdlLocation, SERVICE);
	}

	public RecepcionComprobantesService(URL wsdlLocation, QName serviceName) {
		super(wsdlLocation, serviceName);
	}

	public RecepcionComprobantesService() {
		super(WSDL_LOCATION, SERVICE);
	}

	public RecepcionComprobantesService(WebServiceFeature... features) {
		super(WSDL_LOCATION, SERVICE, features);
	}

	public RecepcionComprobantesService(URL wsdlLocation, WebServiceFeature... features) {
		super(wsdlLocation, SERVICE, features);
	}

	public RecepcionComprobantesService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
		super(wsdlLocation, serviceName, features);
	}

	/**
	 *
	 * @return returns RecepcionComprobantes
	 */
	@WebEndpoint(name = "RecepcionComprobantesPort")
	public RecepcionComprobantes getRecepcionComprobantesPort() {
		return super.getPort(RecepcionComprobantesPort, RecepcionComprobantes.class);
	}

	/**
	 * 
	 * @param features
	 *            A list of {@link javax.xml.ws.WebServiceFeature} to configure
	 *            on the proxy. Supported features not in the
	 *            <code>features</code> parameter will have their default
	 *            values.
	 * @return returns RecepcionComprobantes
	 */
	@WebEndpoint(name = "RecepcionComprobantesPort")
	public RecepcionComprobantes getRecepcionComprobantesPort(WebServiceFeature... features) {
		return super.getPort(RecepcionComprobantesPort, RecepcionComprobantes.class, features);
	}

}
